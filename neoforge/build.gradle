plugins {
	id 'net.neoforged.moddev' version '1.0.14'
	id 'maven-publish'
}

version = project.mod_version
group = project.maven_group

base {
	archivesName = project.archives_base_name
}

neoForge {
	version = '20.4.239'

	parchment {
		minecraftVersion = '2024.04.14-1.20.4'
	}

	runs {
		client {
			client()

			// Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
			systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
		}

		server {
			server()
			programArgument '--nogui'
			systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
		}

		// This run config launches GameTestServer and runs all registered gametests, then exits.
		// By default, the server will crash when no gametests are provided.
		// The gametest system is also enabled by default for other run configs under the /test command.
		gameTestServer {
			type = "gameTestServer"
			systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
		}

		data {
			data()

			// example of overriding the workingDirectory set in configureEach above, uncomment if you want to use it
			// gameDirectory = project.file('run-data')

			// Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
			programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
		}

		// applies to all the run configs above
		configureEach {
			// Recommended logging data for a userdev environment
			// The markers can be added/remove as needed separated by commas.
			// "SCAN": For mods scan.
			// "REGISTRIES": For firing of registry events.
			// "REGISTRYDUMP": For getting the contents of all registries.
			systemProperty 'forge.logging.markers', 'REGISTRIES'

			// Recommended logging level for the console
			// You can set various levels here.
			// Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
			logLevel = org.slf4j.event.Level.DEBUG
		}
	}
}

dependencies {
	implementation project(":common")
}

processResources {
	inputs.property "version", project.version

}

tasks.withType(JavaCompile).configureEach {
	options.encoding = 'UTF-8'
	options.release = 17
}

java {
	withSourcesJar()
	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			artifactId = project.archives_base_name
			from components.java
		}
	}
	repositories {
		// Add your repository here
	}
}